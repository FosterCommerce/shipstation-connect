{% import "_includes/forms" as forms %}
{% extends "_layouts/cp" %}

{% set title = 'Settings'|t('better-logging') %}
{% set selectedSubnavItem = 'settings' %}
{% set fullPageForm = true %}

{% block actionButton %}
  <div class="btngroup">
     <input type="submit" class="btn submit" value="{{ "Save"|t('shipstationconnect') }}">
  </div>
{% endblock %}

{% set content %}
  <input type="hidden" name="action" value="shipstationconnect/settings/save">
  {{ redirectInput('shipstationconnect/settings') }}
  <div>
      <h3>Custom Store</h3>
      <p>
          ShipStation's custom store integration works by requesting orders from ShipStation Connect (shipped and unshipped),
          and then by notifying ShipStation Connect when an order has been shipped.
      </p>
      <p>
        Once you've configured ShipStation Connects's settings below, create a <i>custom store</i> in ShipStation.
        You'll need to provide ShipStation with:
      </p>
      <ul style="list-style-type:disc;margin-left:20px;">
          <li>Username for ShipStation to retrieve/update orders</li>
          <li>Password for ShipStation to retrieve/update orders</li>
          <li>XML Page URL</li>
          <li>Order Statuses (optional)</li>
      </ul>

      <h3>Order Statuses</h3>
      <p>
          If you have defined custom order statuses, you will need to define them in ShipStation accordingly.
          By default, Craft Commerce uses "processing" for "Awaiting Shipment Statuses" in ShipStation, and "shipped" for "Shipped Statuses".
          Other ShipStation statuses can be left as is, as Commerce doesn't have any corresponding statuses. See below for the statuses currently enabled.
      </p>
  </div>
  {% set fields = craft.app.fields.allFields %}
  {% set storeFields = fields|filter(f => is_dropdown(f))|map(f => { label: f.name, value: f.handle }) %}
  {% set storeFields = [{ label: 'Default', value: '' }]|merge(storeFields) %}

  {{ forms.selectField({
      label: "Select ShipStation Store field"|t('shipstationconnect'),
      instructions: 'If you have multiple stores, you can add a dropdown field to your Orders to specify which store that order belongs to.'|t('shipstationstore'),
      name: 'settings[storesFieldHandle]',
      value: settings.storesFieldHandle,
      options: storeFields
  }) }}

  {% set storeField = craft.app.fields.fieldByHandle(settings.storesFieldHandle) %}
  {% if storeField is not null %}
    <div class="field">
      <div class="heading">
          <label>Custom XML Page URLs</label>
          <div class="instructions">
              <p>When setting up your ShipStation Custom Store, enter these URL's for the relevant store</p>
          </div>
      </div>
      <ul style="margin-left: 2em;">
        {% for fieldOption in storeField.options %}
          <li>
            <span style="font-weight: bold">{{ fieldOption.label }}</span>
            <pre><code>{{ siteUrl }}actions/shipstationconnect/orders/process?store={{ fieldOption.value }}</code></pre>
          </li>
        {% endfor %}
      </ul>
    </div>
  {% else %}
      <div class="field">
        <div class="heading">
            <label>Custom XML Page URL</label>
            <div class="instructions">
                <p>When setting up your ShipStation Custom Store, enter this URL so ShipStation can retrieve and update orders.</p>
            </div>
        </div>
        <div class="input" style="margin-left: 2em;">
          <pre><code>{{ siteUrl }}actions/shipstationconnect/orders/process</code></pre>
        </div>
      </div>
  {% endif %}

  {{ forms.autosuggestField({
      label: 'Username'|t('shipstationconnect'),
      instructions: 'The username associated with your custom store, not your Craft nor ShipStation usernames.'|t('shipstationconnect'),
      id: 'shipstation_username',
      name: 'settings[shipstationUsername]',
      value: settings.shipstationUsername,
      errors: settings.getErrors('shipstationUsername'),
      class: 'ltr',
      suggestEnvVars: true,
  }) }}

  {{ forms.autosuggestField({
      label: 'Password'|t('shipstationconnect'),
      instructions: 'The password associated with your custom store, not your Craft nor ShipStation passwords.'|t('shipstationconnect'),
      id: 'shipstation_password',
      type: 'password',
      name: 'settings[shipstationPassword]',
      value: settings.shipstationPassword,
      errors: settings.getErrors('shipstationPassword'),
      class: 'ltr',
      suggestEnvVars: true,
  }) }}

  {{ forms.textField({
      label: 'Page Size for Orders'|t('shipstationconnect'),
      instructions: 'The number of orders returned for each request from ShipStation. Too many orders at once will take too long to respond, while too few will require many requests.'|t('shipstationconnect'),
      id: 'orders_page_size',
      name: 'settings[ordersPageSize]',
      value: settings.ordersPageSize,
      errors: settings.getErrors('ordersPageSize'),
  }) }}

  {{ forms.textField({
      label: 'Order ID Prefix'|t('shipstationconnect'),
      instructions: 'Order IDs sent to ShipStation will be integers (eg <code>1234</code>). Optionally add a prefix to the ID to guarantee unique IDs (eg a prefix of <code>commerce_</code> would yield an Order ID of <code>commerce_1234</code>).'|raw|t('shipstationconnect'),
      id: 'order_id_prefix',
      name: 'settings[orderIdPrefix]',
      value: settings.orderIdPrefix,
      errors: settings.getErrors('orderIdPrefix'),
  }) }}

  <div class="field">
      <div class="heading">
          <label>Commerce Order Statuses</label>
          <div class="instructions">
              <p>Set your Custom Store's Order Statuses according to your business process and the statuses enabled in Craft Commerce</p>
          </div>
      </div>
      <ul style="list-style-type:disc;margin-left:20px;">
          {% for status in craft.commerce.orderStatuses.getAllOrderStatuses %}
          <li>{{ status.name }} &mdash; <code>{{ status.handle }}</code></li>
          {% endfor %}
      </ul>
  </div>

  <h2>Shipping Info Matrix Field</h2>

  {% set fields = craft.app.fields.allFields %}
  {% set fields = fields|filter(f => is_matrix(f))|map(f => { label: f.name, value: f.handle }) %}

  {% if fields|length == 0 or settings.matrixFieldHandle is null or settings.matrixFieldHandle|length == 0 %}
  <div class="error">
    A matrix field with a block type and the following fields is required:
    <ul style="list-style:inherit">
      <li>Carrier text field</li>
      <li>Service text field</li>
      <li>Tracking number text field</li>
    </ul>
  </div>
  {% endif %}

  {{ forms.selectField({
      label: "Matrix Field Handle"|t('shipstationconnect'),
      name: 'settings[matrixFieldHandle]',
      value: settings.matrixFieldHandle,
      options: fields
  }) }}

  {{ forms.textField({
      label: 'Block Type Handle'|t('shipstationconnect'),
      instructions: ''|t('shipstationconnect'),
      name: 'settings[blockTypeHandle]',
      value: settings.blockTypeHandle,
      errors: settings.getErrors('blockTypeHandle'),
  }) }}

  {{ forms.textField({
      label: 'Carrier Field Handle'|t('shipstationconnect'),
      instructions: ''|t('shipstationconnect'),
      name: 'settings[carrierFieldHandle]',
      value: settings.carrierFieldHandle,
      errors: settings.getErrors('carrierFieldHandle'),
  }) }}

  {{ forms.textField({
      label: 'Service Field Handle'|t('shipstationconnect'),
      instructions: ''|t('shipstationconnect'),
      name: 'settings[serviceFieldHandle]',
      value: settings.serviceFieldHandle,
      errors: settings.getErrors('serviceFieldHandle'),
  }) }}

  {{ forms.textField({
      label: 'Tracking Number Field Handle'|t('shipstationconnect'),
      instructions: ''|t('shipstationconnect'),
      name: 'settings[trackingNumberFieldHandle]',
      value: settings.trackingNumberFieldHandle,
      errors: settings.getErrors('trackingNumberFieldHandle'),
  }) }}

  {{ forms.lightSwitchField({
      label: "Billing address same as shipping address"|t('shipstationconnect'),
      instructions: "When billing address is missing, use the shipping address instead"|t('shipstationconnect'),
      name: 'settings[billingSameAsShipping]',
      on: settings.billingSameAsShipping,
      checked: settings.billingSameAsShipping,
      errors: settings.getErrors('billingSameAsShipping')
  }) }}
{% endset %}
